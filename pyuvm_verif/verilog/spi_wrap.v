/* Generated by Yosys 0.38+92 (git sha1 29cd5a6da, gcc 13.2.1 -fPIC -Os) */
(* top =  1  *)
(* generator = "Amaranth" *)

module spi_wrap
       (
           input          rst,
           input          rstb,
           input          wstb,
           input  [4:0]   addr,
           input  [7:0]   wdata,
           input          cipo,

           output [7:0]   rdata,
           output         sck,
           output         copi,
           output         csn,
           output reg     done
       );

  //clock generation
  bit clk_test;

  initial clk_test = 0;
  always #5 clk_test = ~clk_test;

  // control process
  initial forever begin
      done = 0;
      @(posedge clk_test);
      if (wstb == 1) begin
        repeat(20)
          @(posedge clk_test);
        done = 1;
        @(posedge clk_test);
      end
  end

  initial begin
  	$dumpfile("dump_wave.vcd");
  	$dumpvars(1,spi_wrap);
  end

  spi_peripheral  spi_inst (
    .clk(clk_test),
    .rst(rst),
    .bus__addr(addr),
    .bus__r_stb(rstb),
    .bus__w_data(wdata),
    .bus__w_stb(wstb),
    .spi_pins__sck_o(sck),
    .spi_pins__copi_o(copi),
    .spi_pins__csn_o(csn),
    .bus__r_data(rdata),
    .spi_pins__cipo_i(cipo)
  );

endmodule : spi_wrap
  input bus__r_stb;
  wire bus__r_stb;
  (* src = "/home/gatecat/amaranth-soc/amaranth_soc/csr/bus.py:205" *)
  wire \bus__r_stb$13 ;
  input [7:0] bus__w_data;
  wire [7:0] bus__w_data;
  (* src = "/home/gatecat/amaranth-soc/amaranth_soc/csr/bus.py:206" *)
  wire [7:0] \bus__w_data$14 ;
  input bus__w_stb;
  wire bus__w_stb;
  (* src = "/home/gatecat/amaranth-soc/amaranth_soc/csr/bus.py:207" *)
  wire \bus__w_stb$15 ;
  input clk;
  wire clk;
  (* src = "/home/gatecat/gf130-design/my_design/ips/spi.py:23" *)
  wire cs;
  (* src = "/home/gatecat/gf130-design/my_design/ips/spi.py:28" *)
  wire [31:0] d_recv;
  (* src = "/home/gatecat/gf130-design/my_design/ips/spi.py:27" *)
  wire [31:0] d_send;
  (* src = "/home/gatecat/amaranth-soc/amaranth_soc/csr/action.py:96" *)
  wire data;
  (* src = "/home/gatecat/amaranth-soc/amaranth_soc/csr/action.py:96" *)
  wire \data$23 ;
  (* src = "/home/gatecat/amaranth-soc/amaranth_soc/csr/action.py:96" *)
  wire \data$25 ;
  (* src = "/home/gatecat/amaranth-soc/amaranth_soc/csr/action.py:96" *)
  wire [4:0] \data$27 ;
  (* src = "/home/gatecat/amaranth-soc/amaranth_soc/csr/action.py:96" *)
  wire [7:0] \data$29 ;
  (* src = "/home/gatecat/gf130-design/my_design/ips/spi.py:26" *)
  wire [7:0] divider;
  (* src = "/home/gatecat/gf130-design/my_design/ips/spi.py:30" *)
  wire done;
  (* src = "/home/gatecat/amaranth-soc/amaranth_soc/csr/action.py:29" *)
  wire [31:0] r_data;
  (* src = "/home/gatecat/amaranth-soc/amaranth_soc/csr/action.py:29" *)
  reg \r_data$36  = 1'h0;
  (* src = "/home/gatecat/amaranth-soc/amaranth_soc/csr/action.py:30" *)
  wire r_stb;
  input rst;
  wire rst;
  (* src = "/home/gatecat/gf130-design/my_design/ips/spi.py:22" *)
  wire sck_edge;
  (* src = "/home/gatecat/gf130-design/my_design/ips/spi.py:21" *)
  wire sck_idle;
  (* src = "/home/gatecat/gf130-design/my_design/ips/spi.py:14" *)
  wire spi__csn_o;
  (* src = "/home/gatecat/gf130-design/my_design/ips/spi.py:13" *)
  wire spi__miso_i;
  (* src = "/home/gatecat/gf130-design/my_design/ips/spi.py:12" *)
  wire spi__mosi_o;
  (* src = "/home/gatecat/gf130-design/my_design/ips/spi.py:11" *)
  wire spi__sck_o;
  output spi_pins__csn_o;
  wire spi_pins__csn_o;
  input spi_pins__miso_i;
  wire spi_pins__miso_i;
  output spi_pins__mosi_o;
  wire spi_pins__mosi_o;
  output spi_pins__sck_o;
  wire spi_pins__sck_o;
  (* src = "/home/gatecat/gf130-design/my_design/ips/spi.py:24" *)
  wire start_xfer;
  (* src = "/home/gatecat/amaranth-soc/amaranth_soc/csr/action.py:61" *)
  wire [31:0] w_data;
  (* src = "/home/gatecat/amaranth-soc/amaranth_soc/csr/action.py:62" *)
  wire w_stb;
  (* src = "/home/gatecat/gf130-design/my_design/ips/spi.py:25" *)
  wire [4:0] width;
  (* src = "/home/gatecat/amaranth-soc/amaranth_soc/csr/action.py:29" *)
  always @(posedge clk)
    \r_data$36  <= \$1 ;
  \spi_peripheral.bridge  bridge (
    .bus__addr(bus__addr),
    .bus__r_data(bus__r_data),
    .bus__r_stb(bus__r_stb),
    .bus__w_data(bus__w_data),
    .bus__w_stb(bus__w_stb),
    .clk(clk),
    .data(sck_idle),
    .\data$6 (sck_edge),
    .\data$7 (cs),
    .\data$8 (width),
    .\data$9 (divider),
    .r_data(r_data),
    .\r_data$14 (\r_data$36 ),
    .r_stb(r_stb),
    .rst(rst),
    .w_data(d_send),
    .w_stb(start_xfer)
  );
  \spi_peripheral.spi  spi (
    .clk(clk),
    .cs(cs),
    .d_recv(r_data),
    .d_send(d_send),
    .divider(divider),
    .done(done),
    .rst(rst),
    .sck_edge(sck_edge),
    .sck_idle(sck_idle),
    .spi__csn_o(spi_pins__csn_o),
    .spi__miso_i(spi_pins__miso_i),
    .spi__mosi_o(spi_pins__mosi_o),
    .spi__sck_o(spi_pins__sck_o),
    .start_xfer(start_xfer),
    .width(width)
  );
  always @* begin
    if (\$auto$verilog_backend.cc:2341:dump_module$1 ) begin end
    \$1  = \r_data$36 ;
    if (r_stb) begin
      \$1  = 1'h0;
    end else if (done) begin
      \$1  = 1'h1;
    end
    if (rst) begin
      \$1  = 1'h0;
    end
  end
  assign \bus__addr$11  = bus__addr;
  assign \bus__r_data$12  = bus__r_data;
  assign \bus__r_stb$13  = bus__r_stb;
  assign \bus__w_data$14  = bus__w_data;
  assign \bus__w_stb$15  = bus__w_stb;
  assign spi__csn_o = spi_pins__csn_o;
  assign spi__miso_i = spi_pins__miso_i;
  assign spi__mosi_o = spi_pins__mosi_o;
  assign spi__sck_o = spi_pins__sck_o;
  assign data = sck_idle;
  assign \data$23  = sck_edge;
  assign \data$25  = cs;
  assign \data$27  = width;
  assign \data$29  = divider;
  assign w_stb = start_xfer;
  assign w_data = d_send;
  assign d_recv = r_data;
endmodule : spi_peripheral

(* generator = "Amaranth" *)
module \spi_peripheral.bridge (bus__r_stb, bus__w_data, bus__w_stb, clk, rst, bus__r_data, \r_data$14 , w_stb, r_stb, w_data, data, \data$6 , \data$7 , \data$8 , \data$9 , r_data, bus__addr);
  wire \$1 ;
  wire \$2 ;
  wire [7:0] \$3 ;
  wire \$4 ;
  wire \$5 ;
  wire \$6 ;
  wire [7:0] \$7 ;
  input [4:0] bus__addr;
  wire [4:0] bus__addr;
  (* src = "/home/gatecat/amaranth-soc/amaranth_soc/csr/bus.py:203" *)
  wire [4:0] \bus__addr$17 ;
  output [7:0] bus__r_data;
  wire [7:0] bus__r_data;
  (* src = "/home/gatecat/amaranth-soc/amaranth_soc/csr/bus.py:204" *)
  wire [7:0] \bus__r_data$18 ;
  input bus__r_stb;
  wire bus__r_stb;
  (* src = "/home/gatecat/amaranth-soc/amaranth_soc/csr/bus.py:205" *)
  wire \bus__r_stb$19 ;
  input [7:0] bus__w_data;
  wire [7:0] bus__w_data;
  (* src = "/home/gatecat/amaranth-soc/amaranth_soc/csr/bus.py:206" *)
  wire [7:0] \bus__w_data$20 ;
  input bus__w_stb;
  wire bus__w_stb;
  (* src = "/home/gatecat/amaranth-soc/amaranth_soc/csr/bus.py:207" *)
  wire \bus__w_stb$21 ;
  input clk;
  wire clk;
  output data;
  wire data;
  output \data$6 ;
  wire \data$6 ;
  output \data$7 ;
  wire \data$7 ;
  output [4:0] \data$8 ;
  wire [4:0] \data$8 ;
  output [7:0] \data$9 ;
  wire [7:0] \data$9 ;
  input [31:0] r_data;
  wire [31:0] r_data;
  input \r_data$14 ;
  wire \r_data$14 ;
  output r_stb;
  wire r_stb;
  input rst;
  wire rst;
  output [31:0] w_data;
  wire [31:0] w_data;
  output w_stb;
  wire w_stb;
  \spi_peripheral.bridge.config  \config  (
    .clk(clk),
    .data(data),
    .\data$1 (\data$6 ),
    .\data$2 (\data$7 ),
    .\data$3 (\data$8 ),
    .element__r_data(\$7 ),
    .element__r_stb(\$4 ),
    .element__w_data(\$3 ),
    .element__w_stb(\$1 ),
    .rst(rst)
  );
  \spi_peripheral.bridge.divider  divider (
    .clk(clk),
    .data(\data$9 ),
    .element__r_stb(\$5 ),
    .element__w_data(\$3 ),
    .element__w_stb(\$2 ),
    .rst(rst)
  );
  \spi_peripheral.bridge.mux  mux (
    .bus__addr(bus__addr),
    .bus__r_data(bus__r_data),
    .bus__r_stb(bus__r_stb),
    .bus__w_data(bus__w_data),
    .bus__w_stb(bus__w_stb),
    .clk(clk),
    .element__r_data(\$7 ),
    .\element__r_data$10 (r_data),
    .\element__r_data$12 (\data$9 ),
    .\element__r_data$14 (\r_data$14 ),
    .element__r_stb(\$4 ),
    .\element__r_stb$11 (\$5 ),
    .\element__r_stb$13 (\$6 ),
    .\element__r_stb$9 (r_stb),
    .element__w_data(\$3 ),
    .\element__w_data$19 (w_data),
    .element__w_stb(\$1 ),
    .\element__w_stb$16 (\$2 ),
    .\element__w_stb$17 (w_stb),
    .rst(rst)
  );
  assign \bus__addr$17  = bus__addr;
  assign \bus__r_data$18  = bus__r_data;
  assign \bus__r_stb$19  = bus__r_stb;
  assign \bus__w_data$20  = bus__w_data;
  assign \bus__w_stb$21  = bus__w_stb;
endmodule

(* generator = "Amaranth" *)
module \spi_peripheral.bridge.config (rst, element__w_stb, element__w_data, element__r_stb, element__r_data, data, \data$1 , \data$2 , \data$3 , clk);
  input clk;
  wire clk;
  output data;
  wire data;
  output \data$1 ;
  wire \data$1 ;
  output \data$2 ;
  wire \data$2 ;
  output [4:0] \data$3 ;
  wire [4:0] \data$3 ;
  output [7:0] element__r_data;
  wire [7:0] element__r_data;
  input element__r_stb;
  wire element__r_stb;
  input [7:0] element__w_data;
  wire [7:0] element__w_data;
  input element__w_stb;
  wire element__w_stb;
  (* src = "/home/gatecat/amaranth-soc/amaranth_soc/csr/reg.py:65" *)
  wire port__r_data;
  (* src = "/home/gatecat/amaranth-soc/amaranth_soc/csr/reg.py:65" *)
  wire \port__r_data$14 ;
  (* src = "/home/gatecat/amaranth-soc/amaranth_soc/csr/reg.py:65" *)
  wire \port__r_data$18 ;
  (* src = "/home/gatecat/amaranth-soc/amaranth_soc/csr/reg.py:65" *)
  wire [4:0] \port__r_data$22 ;
  (* src = "/home/gatecat/amaranth-soc/amaranth_soc/csr/reg.py:66" *)
  wire port__r_stb;
  (* src = "/home/gatecat/amaranth-soc/amaranth_soc/csr/reg.py:66" *)
  wire \port__r_stb$15 ;
  (* src = "/home/gatecat/amaranth-soc/amaranth_soc/csr/reg.py:66" *)
  wire \port__r_stb$19 ;
  (* src = "/home/gatecat/amaranth-soc/amaranth_soc/csr/reg.py:66" *)
  wire \port__r_stb$23 ;
  (* src = "/home/gatecat/amaranth-soc/amaranth_soc/csr/reg.py:67" *)
  wire port__w_data;
  (* src = "/home/gatecat/amaranth-soc/amaranth_soc/csr/reg.py:67" *)
  wire \port__w_data$16 ;
  (* src = "/home/gatecat/amaranth-soc/amaranth_soc/csr/reg.py:67" *)
  wire \port__w_data$20 ;
  (* src = "/home/gatecat/amaranth-soc/amaranth_soc/csr/reg.py:67" *)
  wire [4:0] \port__w_data$24 ;
  (* src = "/home/gatecat/amaranth-soc/amaranth_soc/csr/reg.py:68" *)
  wire port__w_stb;
  (* src = "/home/gatecat/amaranth-soc/amaranth_soc/csr/reg.py:68" *)
  wire \port__w_stb$17 ;
  (* src = "/home/gatecat/amaranth-soc/amaranth_soc/csr/reg.py:68" *)
  wire \port__w_stb$21 ;
  (* src = "/home/gatecat/amaranth-soc/amaranth_soc/csr/reg.py:68" *)
  wire \port__w_stb$25 ;
  input rst;
  wire rst;
  \spi_peripheral.bridge.config.chip_select  chip_select (
    .clk(clk),
    .data(\data$2 ),
    .port__w_data(element__w_data[2]),
    .port__w_stb(element__w_stb),
    .rst(rst)
  );
  \spi_peripheral.bridge.config.sck_edge  sck_edge (
    .clk(clk),
    .data(\data$1 ),
    .port__w_data(element__w_data[1]),
    .port__w_stb(element__w_stb),
    .rst(rst)
  );
  \spi_peripheral.bridge.config.sck_idle  sck_idle (
    .clk(clk),
    .data(data),
    .port__w_data(element__w_data[0]),
    .port__w_stb(element__w_stb),
    .rst(rst)
  );
  \spi_peripheral.bridge.config.width  width (
    .clk(clk),
    .data(\data$3 ),
    .port__w_data(element__w_data[7:3]),
    .port__w_stb(element__w_stb),
    .rst(rst)
  );
  assign port__r_data = data;
  assign port__r_stb = element__r_stb;
  assign port__w_data = element__w_data[0];
  assign port__w_stb = element__w_stb;
  assign \port__r_data$14  = \data$1 ;
  assign \port__r_stb$15  = element__r_stb;
  assign \port__w_data$16  = element__w_data[1];
  assign \port__w_stb$17  = element__w_stb;
  assign \port__r_data$18  = \data$2 ;
  assign \port__r_stb$19  = element__r_stb;
  assign \port__w_data$20  = element__w_data[2];
  assign \port__w_stb$21  = element__w_stb;
  assign \port__r_data$22  = \data$3 ;
  assign \port__r_stb$23  = element__r_stb;
  assign \port__w_data$24  = element__w_data[7:3];
  assign \port__w_stb$25  = element__w_stb;
  assign element__r_data[7:3] = \data$3 ;
  assign element__r_data[2] = \data$2 ;
  assign element__r_data[1] = \data$1 ;
  assign element__r_data[0] = data;
endmodule

(* generator = "Amaranth" *)
module \spi_peripheral.bridge.config.chip_select (rst, port__w_stb, port__w_data, data, clk);
  reg \$auto$verilog_backend.cc:2341:dump_module$2  = 0;
  reg \$1 ;
  (* init = 1'h0 *)
  (* src = "/home/gatecat/amaranth-soc/amaranth_soc/csr/action.py:98" *)
  wire _storage;
  input clk;
  wire clk;
  output data;
  reg data = 1'h0;
  (* init = 1'h0 *)
  (* src = "/home/gatecat/amaranth-soc/amaranth_soc/csr/reg.py:65" *)
  wire port__r_data;
  input port__w_data;
  wire port__w_data;
  input port__w_stb;
  wire port__w_stb;
  input rst;
  wire rst;
  (* src = "/home/gatecat/amaranth-soc/amaranth_soc/csr/action.py:98" *)
  always @(posedge clk)
    data <= \$1 ;
  always @* begin
    if (\$auto$verilog_backend.cc:2341:dump_module$2 ) begin end
    \$1  = data;
    if (port__w_stb) begin
      \$1  = port__w_data;
    end
    if (rst) begin
      \$1  = 1'h0;
    end
  end
  assign port__r_data = data;
  assign _storage = data;
endmodule

(* generator = "Amaranth" *)
module \spi_peripheral.bridge.config.sck_edge (rst, port__w_stb, port__w_data, data, clk);
  reg \$auto$verilog_backend.cc:2341:dump_module$3  = 0;
  reg \$1 ;
  (* init = 1'h0 *)
  (* src = "/home/gatecat/amaranth-soc/amaranth_soc/csr/action.py:98" *)
  wire _storage;
  input clk;
  wire clk;
  output data;
  reg data = 1'h0;
  (* init = 1'h0 *)
  (* src = "/home/gatecat/amaranth-soc/amaranth_soc/csr/reg.py:65" *)
  wire port__r_data;
  input port__w_data;
  wire port__w_data;
  input port__w_stb;
  wire port__w_stb;
  input rst;
  wire rst;
  (* src = "/home/gatecat/amaranth-soc/amaranth_soc/csr/action.py:98" *)
  always @(posedge clk)
    data <= \$1 ;
  always @* begin
    if (\$auto$verilog_backend.cc:2341:dump_module$3 ) begin end
    \$1  = data;
    if (port__w_stb) begin
      \$1  = port__w_data;
    end
    if (rst) begin
      \$1  = 1'h0;
    end
  end
  assign port__r_data = data;
  assign _storage = data;
endmodule

(* generator = "Amaranth" *)
module \spi_peripheral.bridge.config.sck_idle (rst, port__w_stb, port__w_data, data, clk);
  reg \$auto$verilog_backend.cc:2341:dump_module$4  = 0;
  reg \$1 ;
  (* init = 1'h0 *)
  (* src = "/home/gatecat/amaranth-soc/amaranth_soc/csr/action.py:98" *)
  wire _storage;
  input clk;
  wire clk;
  output data;
  reg data = 1'h0;
  (* init = 1'h0 *)
  (* src = "/home/gatecat/amaranth-soc/amaranth_soc/csr/reg.py:65" *)
  wire port__r_data;
  input port__w_data;
  wire port__w_data;
  input port__w_stb;
  wire port__w_stb;
  input rst;
  wire rst;
  (* src = "/home/gatecat/amaranth-soc/amaranth_soc/csr/action.py:98" *)
  always @(posedge clk)
    data <= \$1 ;
  always @* begin
    if (\$auto$verilog_backend.cc:2341:dump_module$4 ) begin end
    \$1  = data;
    if (port__w_stb) begin
      \$1  = port__w_data;
    end
    if (rst) begin
      \$1  = 1'h0;
    end
  end
  assign port__r_data = data;
  assign _storage = data;
endmodule

(* generator = "Amaranth" *)
module \spi_peripheral.bridge.config.width (rst, port__w_stb, port__w_data, data, clk);
  reg \$auto$verilog_backend.cc:2341:dump_module$5  = 0;
  reg [4:0] \$1 ;
  (* init = 5'h00 *)
  (* src = "/home/gatecat/amaranth-soc/amaranth_soc/csr/action.py:98" *)
  wire [4:0] _storage;
  input clk;
  wire clk;
  output [4:0] data;
  reg [4:0] data = 5'h00;
  (* init = 5'h00 *)
  (* src = "/home/gatecat/amaranth-soc/amaranth_soc/csr/reg.py:65" *)
  wire [4:0] port__r_data;
  input [4:0] port__w_data;
  wire [4:0] port__w_data;
  input port__w_stb;
  wire port__w_stb;
  input rst;
  wire rst;
  (* src = "/home/gatecat/amaranth-soc/amaranth_soc/csr/action.py:98" *)
  always @(posedge clk)
    data <= \$1 ;
  always @* begin
    if (\$auto$verilog_backend.cc:2341:dump_module$5 ) begin end
    \$1  = data;
    if (port__w_stb) begin
      \$1  = port__w_data;
    end
    if (rst) begin
      \$1  = 5'h00;
    end
  end
  assign port__r_data = data;
  assign _storage = data;
endmodule

(* generator = "Amaranth" *)
module \spi_peripheral.bridge.divider (rst, element__w_stb, element__w_data, element__r_stb, data, clk);
  input clk;
  wire clk;
  output [7:0] data;
  wire [7:0] data;
  (* src = "/home/gatecat/amaranth-soc/amaranth_soc/csr/bus.py:66" *)
  wire [7:0] element__r_data;
  input element__r_stb;
  wire element__r_stb;
  input [7:0] element__w_data;
  wire [7:0] element__w_data;
  input element__w_stb;
  wire element__w_stb;
  (* src = "/home/gatecat/amaranth-soc/amaranth_soc/csr/reg.py:65" *)
  wire [7:0] port__r_data;
  (* src = "/home/gatecat/amaranth-soc/amaranth_soc/csr/reg.py:66" *)
  wire port__r_stb;
  (* src = "/home/gatecat/amaranth-soc/amaranth_soc/csr/reg.py:67" *)
  wire [7:0] port__w_data;
  (* src = "/home/gatecat/amaranth-soc/amaranth_soc/csr/reg.py:68" *)
  wire port__w_stb;
  input rst;
  wire rst;
  \spi_peripheral.bridge.divider.val  val (
    .clk(clk),
    .data(data),
    .port__w_data(element__w_data),
    .port__w_stb(element__w_stb),
    .rst(rst)
  );
  assign element__r_data = data;
  assign port__r_data = data;
  assign port__r_stb = element__r_stb;
  assign port__w_data = element__w_data;
  assign port__w_stb = element__w_stb;
endmodule

(* generator = "Amaranth" *)
module \spi_peripheral.bridge.divider.val (rst, port__w_stb, port__w_data, data, clk);
  reg \$auto$verilog_backend.cc:2341:dump_module$6  = 0;
  reg [7:0] \$1 ;
  (* init = 8'h00 *)
  (* src = "/home/gatecat/amaranth-soc/amaranth_soc/csr/action.py:98" *)
  wire [7:0] _storage;
  input clk;
  wire clk;
  output [7:0] data;
  reg [7:0] data = 8'h00;
  (* init = 8'h00 *)
  (* src = "/home/gatecat/amaranth-soc/amaranth_soc/csr/reg.py:65" *)
  wire [7:0] port__r_data;
  input [7:0] port__w_data;
  wire [7:0] port__w_data;
  input port__w_stb;
  wire port__w_stb;
  input rst;
  wire rst;
  (* src = "/home/gatecat/amaranth-soc/amaranth_soc/csr/action.py:98" *)
  always @(posedge clk)
    data <= \$1 ;
  always @* begin
    if (\$auto$verilog_backend.cc:2341:dump_module$6 ) begin end
    \$1  = data;
    if (port__w_stb) begin
      \$1  = port__w_data;
    end
    if (rst) begin
      \$1  = 8'h00;
    end
  end
  assign port__r_data = data;
  assign _storage = data;
endmodule

(* generator = "Amaranth" *)
module \spi_peripheral.bridge.mux (bus__r_stb, bus__w_data, bus__w_stb, clk, rst, bus__r_data, \element__r_data$14 , element__w_stb, \element__w_stb$16 , element__w_data, \element__w_stb$17 , element__r_stb, \element__r_stb$9 , \element__r_stb$11 , \element__r_stb$13 , \element__w_data$19 , element__r_data, \element__r_data$12 , \element__r_data$10 , bus__addr);
  reg \$auto$verilog_backend.cc:2341:dump_module$7  = 0;
  wire [7:0] \$1 ;
  wire [7:0] \$10 ;
  wire [7:0] \$11 ;
  wire [7:0] \$12 ;
  wire [7:0] \$13 ;
  wire [7:0] \$14 ;
  wire \$15 ;
  wire \$16 ;
  wire \$17 ;
  wire [7:0] \$18 ;
  wire [7:0] \$19 ;
  wire [7:0] \$2 ;
  wire [7:0] \$20 ;
  wire [7:0] \$21 ;
  wire [7:0] \$22 ;
  wire [7:0] \$23 ;
  wire [7:0] \$24 ;
  reg \$25 ;
  reg [7:0] \$26 ;
  reg \$27 ;
  reg [7:0] \$28 ;
  reg \$29 ;
  wire [7:0] \$3 ;
  reg [7:0] \$30 ;
  reg \$31 ;
  reg [7:0] \$32 ;
  reg \$33 ;
  reg \$34 ;
  reg [7:0] \$35 ;
  reg [7:0] \$36 ;
  reg [7:0] \$37 ;
  reg \$38 ;
  reg [7:0] \$39 ;
  wire [7:0] \$4 ;
  wire [7:0] \$5 ;
  wire [7:0] \$6 ;
  wire \$7 ;
  wire [7:0] \$8 ;
  wire [7:0] \$9 ;
  input [4:0] bus__addr;
  wire [4:0] bus__addr;
  output [7:0] bus__r_data;
  wire [7:0] bus__r_data;
  input bus__r_stb;
  wire bus__r_stb;
  input [7:0] bus__w_data;
  wire [7:0] bus__w_data;
  input bus__w_stb;
  wire bus__w_stb;
  input clk;
  wire clk;
  input [7:0] element__r_data;
  wire [7:0] element__r_data;
  input [31:0] \element__r_data$10 ;
  wire [31:0] \element__r_data$10 ;
  input [7:0] \element__r_data$12 ;
  wire [7:0] \element__r_data$12 ;
  input \element__r_data$14 ;
  wire \element__r_data$14 ;
  output element__r_stb;
  reg element__r_stb;
  output \element__r_stb$11 ;
  reg \element__r_stb$11 ;
  output \element__r_stb$13 ;
  reg \element__r_stb$13 ;
  output \element__r_stb$9 ;
  reg \element__r_stb$9 ;
  output [7:0] element__w_data;
  reg [7:0] element__w_data = 8'h00;
  output [31:0] \element__w_data$19 ;
  wire [31:0] \element__w_data$19 ;
  (* init = 8'h00 *)
  (* src = "/home/gatecat/amaranth-soc/amaranth_soc/csr/bus.py:71" *)
  wire [7:0] \element__w_data$20 ;
  output element__w_stb;
  reg element__w_stb = 1'h0;
  output \element__w_stb$16 ;
  reg \element__w_stb$16  = 1'h0;
  output \element__w_stb$17 ;
  reg \element__w_stb$17  = 1'h0;
  (* src = "/home/gatecat/amaranth-soc/amaranth_soc/csr/bus.py:337" *)
  reg [7:0] r_shadow__0__data = 8'h00;
  (* src = "/home/gatecat/amaranth-soc/amaranth_soc/csr/bus.py:338" *)
  reg r_shadow__0__r_en = 1'h0;
  (* src = "/home/gatecat/amaranth-soc/amaranth_soc/csr/bus.py:339" *)
  wire r_shadow__0__w_en;
  (* src = "/home/gatecat/amaranth-soc/amaranth_soc/csr/bus.py:337" *)
  reg [7:0] r_shadow__1__data = 8'h00;
  (* src = "/home/gatecat/amaranth-soc/amaranth_soc/csr/bus.py:338" *)
  reg r_shadow__1__r_en = 1'h0;
  (* src = "/home/gatecat/amaranth-soc/amaranth_soc/csr/bus.py:339" *)
  wire r_shadow__1__w_en;
  (* src = "/home/gatecat/amaranth-soc/amaranth_soc/csr/bus.py:337" *)
  reg [7:0] r_shadow__2__data = 8'h00;
  (* src = "/home/gatecat/amaranth-soc/amaranth_soc/csr/bus.py:338" *)
  reg r_shadow__2__r_en = 1'h0;
  (* src = "/home/gatecat/amaranth-soc/amaranth_soc/csr/bus.py:339" *)
  wire r_shadow__2__w_en;
  (* src = "/home/gatecat/amaranth-soc/amaranth_soc/csr/bus.py:337" *)
  reg [7:0] r_shadow__3__data = 8'h00;
  (* src = "/home/gatecat/amaranth-soc/amaranth_soc/csr/bus.py:338" *)
  reg r_shadow__3__r_en = 1'h0;
  (* src = "/home/gatecat/amaranth-soc/amaranth_soc/csr/bus.py:339" *)
  wire r_shadow__3__w_en;
  input rst;
  wire rst;
  (* init = 8'h00 *)
  (* src = "/home/gatecat/amaranth-soc/amaranth_soc/csr/bus.py:337" *)
  wire [7:0] w_shadow__0__data;
  (* src = "/home/gatecat/amaranth-soc/amaranth_soc/csr/bus.py:339" *)
  reg w_shadow__0__w_en;
  (* src = "/home/gatecat/amaranth-soc/amaranth_soc/csr/bus.py:337" *)
  reg [7:0] w_shadow__1__data = 8'h00;
  (* src = "/home/gatecat/amaranth-soc/amaranth_soc/csr/bus.py:339" *)
  reg w_shadow__1__w_en;
  (* src = "/home/gatecat/amaranth-soc/amaranth_soc/csr/bus.py:337" *)
  reg [7:0] w_shadow__2__data = 8'h00;
  (* src = "/home/gatecat/amaranth-soc/amaranth_soc/csr/bus.py:339" *)
  reg w_shadow__2__w_en;
  (* src = "/home/gatecat/amaranth-soc/amaranth_soc/csr/bus.py:337" *)
  reg [7:0] w_shadow__3__data = 8'h00;
  (* src = "/home/gatecat/amaranth-soc/amaranth_soc/csr/bus.py:339" *)
  reg w_shadow__3__w_en;
  assign \$1  = element__r_stb ? (* src = "/home/gatecat/amaranth-soc/amaranth_soc/csr/bus.py:617" *) element__r_data : 8'h00;
  assign \$3  = \element__r_stb$9  ? (* src = "/home/gatecat/amaranth-soc/amaranth_soc/csr/bus.py:617" *) \element__r_data$10 [7:0] : 8'h00;
  assign \$4  = \$2  | (* src = "/home/gatecat/amaranth-soc/amaranth_soc/csr/bus.py:617" *) \$3 ;
  assign \$5  = \element__r_stb$11  ? (* src = "/home/gatecat/amaranth-soc/amaranth_soc/csr/bus.py:617" *) \element__r_data$12  : 8'h00;
  assign \$6  = \$4  | (* src = "/home/gatecat/amaranth-soc/amaranth_soc/csr/bus.py:617" *) \$5 ;
  assign \$7  = \element__r_stb$13  ? (* src = "/home/gatecat/amaranth-soc/amaranth_soc/csr/bus.py:617" *) \element__r_data$14  : 1'h0;
  assign \$8  = \$6  | (* src = "/home/gatecat/amaranth-soc/amaranth_soc/csr/bus.py:617" *) { 7'h00, \$7  };
  assign \$9  = \element__r_stb$9  ? (* src = "/home/gatecat/amaranth-soc/amaranth_soc/csr/bus.py:617" *) \element__r_data$10 [15:8] : 8'h00;
  assign \$11  = \element__r_stb$9  ? (* src = "/home/gatecat/amaranth-soc/amaranth_soc/csr/bus.py:617" *) \element__r_data$10 [23:16] : 8'h00;
  assign \$13  = \element__r_stb$9  ? (* src = "/home/gatecat/amaranth-soc/amaranth_soc/csr/bus.py:617" *) \element__r_data$10 [31:24] : 8'h00;
  assign \$16  = \$15  | (* src = "/home/gatecat/amaranth-soc/amaranth_soc/csr/bus.py:616" *) \element__r_stb$9 ;
  assign \$17  = \$16  | (* src = "/home/gatecat/amaranth-soc/amaranth_soc/csr/bus.py:616" *) \element__r_stb$11 ;
  assign r_shadow__0__w_en = \$17  | (* src = "/home/gatecat/amaranth-soc/amaranth_soc/csr/bus.py:616" *) \element__r_stb$13 ;
  assign \$18  = r_shadow__0__r_en ? (* src = "/home/gatecat/amaranth-soc/amaranth_soc/csr/bus.py:623" *) r_shadow__0__data : 8'h00;
  assign \$20  = r_shadow__1__r_en ? (* src = "/home/gatecat/amaranth-soc/amaranth_soc/csr/bus.py:623" *) r_shadow__1__data : 8'h00;
  assign \$21  = \$19  | (* src = "/home/gatecat/amaranth-soc/amaranth_soc/csr/bus.py:623" *) \$20 ;
  assign \$22  = r_shadow__2__r_en ? (* src = "/home/gatecat/amaranth-soc/amaranth_soc/csr/bus.py:623" *) r_shadow__2__data : 8'h00;
  assign \$23  = \$21  | (* src = "/home/gatecat/amaranth-soc/amaranth_soc/csr/bus.py:623" *) \$22 ;
  assign \$24  = r_shadow__3__r_en ? (* src = "/home/gatecat/amaranth-soc/amaranth_soc/csr/bus.py:623" *) r_shadow__3__data : 8'h00;
  assign bus__r_data = \$23  | (* src = "/home/gatecat/amaranth-soc/amaranth_soc/csr/bus.py:623" *) \$24 ;
  (* src = "/home/gatecat/amaranth-soc/amaranth_soc/csr/bus.py:338" *)
  always @(posedge clk)
    r_shadow__0__r_en <= \$25 ;
  (* src = "/home/gatecat/amaranth-soc/amaranth_soc/csr/bus.py:337" *)
  always @(posedge clk)
    r_shadow__0__data <= \$26 ;
  (* src = "/home/gatecat/amaranth-soc/amaranth_soc/csr/bus.py:338" *)
  always @(posedge clk)
    r_shadow__1__r_en <= \$27 ;
  (* src = "/home/gatecat/amaranth-soc/amaranth_soc/csr/bus.py:337" *)
  always @(posedge clk)
    r_shadow__1__data <= \$28 ;
  (* src = "/home/gatecat/amaranth-soc/amaranth_soc/csr/bus.py:338" *)
  always @(posedge clk)
    r_shadow__2__r_en <= \$29 ;
  (* src = "/home/gatecat/amaranth-soc/amaranth_soc/csr/bus.py:337" *)
  always @(posedge clk)
    r_shadow__2__data <= \$30 ;
  (* src = "/home/gatecat/amaranth-soc/amaranth_soc/csr/bus.py:338" *)
  always @(posedge clk)
    r_shadow__3__r_en <= \$31 ;
  (* src = "/home/gatecat/amaranth-soc/amaranth_soc/csr/bus.py:337" *)
  always @(posedge clk)
    r_shadow__3__data <= \$32 ;
  (* src = "/home/gatecat/amaranth-soc/amaranth_soc/csr/bus.py:72" *)
  always @(posedge clk)
    element__w_stb <= \$33 ;
  (* src = "/home/gatecat/amaranth-soc/amaranth_soc/csr/bus.py:72" *)
  always @(posedge clk)
    \element__w_stb$16  <= \$34 ;
  (* src = "/home/gatecat/amaranth-soc/amaranth_soc/csr/bus.py:337" *)
  always @(posedge clk)
    element__w_data <= \$35 ;
  (* src = "/home/gatecat/amaranth-soc/amaranth_soc/csr/bus.py:337" *)
  always @(posedge clk)
    w_shadow__1__data <= \$36 ;
  (* src = "/home/gatecat/amaranth-soc/amaranth_soc/csr/bus.py:337" *)
  always @(posedge clk)
    w_shadow__2__data <= \$37 ;
  (* src = "/home/gatecat/amaranth-soc/amaranth_soc/csr/bus.py:72" *)
  always @(posedge clk)
    \element__w_stb$17  <= \$38 ;
  (* src = "/home/gatecat/amaranth-soc/amaranth_soc/csr/bus.py:337" *)
  always @(posedge clk)
    w_shadow__3__data <= \$39 ;
  always @* begin
    if (\$auto$verilog_backend.cc:2341:dump_module$7 ) begin end
    \element__r_stb$9  = 1'h0;
    casez (bus__addr)
      5'h00:
          /* empty */;
      5'h0c:
          \element__r_stb$9  = bus__r_stb;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2341:dump_module$7 ) begin end
    \element__r_stb$11  = 1'h0;
    casez (bus__addr)
      5'h00:
          /* empty */;
      5'h0c:
          /* empty */;
      5'h04:
          \element__r_stb$11  = bus__r_stb;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2341:dump_module$7 ) begin end
    \element__r_stb$13  = 1'h0;
    casez (bus__addr)
      5'h00:
          /* empty */;
      5'h0c:
          /* empty */;
      5'h04:
          /* empty */;
      5'h10:
          \element__r_stb$13  = bus__r_stb;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2341:dump_module$7 ) begin end
    w_shadow__0__w_en = 1'h0;
    casez (bus__addr)
      5'h00:
          w_shadow__0__w_en = bus__w_stb;
      5'h08:
          w_shadow__0__w_en = bus__w_stb;
      5'h04:
          w_shadow__0__w_en = bus__w_stb;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2341:dump_module$7 ) begin end
    w_shadow__1__w_en = 1'h0;
    casez (bus__addr)
      5'h09:
          w_shadow__1__w_en = bus__w_stb;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2341:dump_module$7 ) begin end
    w_shadow__2__w_en = 1'h0;
    casez (bus__addr)
      5'h0a:
          w_shadow__2__w_en = bus__w_stb;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2341:dump_module$7 ) begin end
    w_shadow__3__w_en = 1'h0;
    casez (bus__addr)
      5'h0b:
          w_shadow__3__w_en = bus__w_stb;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2341:dump_module$7 ) begin end
    \$25  = 1'h0;
    casez (bus__addr)
      5'h00:
          \$25  = bus__r_stb;
      5'h0c:
          \$25  = bus__r_stb;
      5'h04:
          \$25  = bus__r_stb;
      5'h10:
          \$25  = bus__r_stb;
    endcase
    if (rst) begin
      \$25  = 1'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2341:dump_module$7 ) begin end
    \$26  = r_shadow__0__data;
    if (r_shadow__0__w_en) begin
      \$26  = \$8 ;
    end
    if (rst) begin
      \$26  = 8'h00;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2341:dump_module$7 ) begin end
    \$27  = 1'h0;
    casez (bus__addr)
      5'h0d:
          \$27  = bus__r_stb;
    endcase
    if (rst) begin
      \$27  = 1'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2341:dump_module$7 ) begin end
    \$28  = r_shadow__1__data;
    if (r_shadow__1__w_en) begin
      \$28  = \$10 ;
    end
    if (rst) begin
      \$28  = 8'h00;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2341:dump_module$7 ) begin end
    \$29  = 1'h0;
    casez (bus__addr)
      5'h0e:
          \$29  = bus__r_stb;
    endcase
    if (rst) begin
      \$29  = 1'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2341:dump_module$7 ) begin end
    \$30  = r_shadow__2__data;
    if (r_shadow__2__w_en) begin
      \$30  = \$12 ;
    end
    if (rst) begin
      \$30  = 8'h00;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2341:dump_module$7 ) begin end
    \$31  = 1'h0;
    casez (bus__addr)
      5'h0f:
          \$31  = bus__r_stb;
    endcase
    if (rst) begin
      \$31  = 1'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2341:dump_module$7 ) begin end
    \$32  = r_shadow__3__data;
    if (r_shadow__3__w_en) begin
      \$32  = \$14 ;
    end
    if (rst) begin
      \$32  = 8'h00;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2341:dump_module$7 ) begin end
    \$33  = 1'h0;
    casez (bus__addr)
      5'h00:
          \$33  = bus__w_stb;
    endcase
    if (rst) begin
      \$33  = 1'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2341:dump_module$7 ) begin end
    \$34  = 1'h0;
    casez (bus__addr)
      5'h00:
          /* empty */;
      5'h08:
          /* empty */;
      5'h04:
          \$34  = bus__w_stb;
    endcase
    if (rst) begin
      \$34  = 1'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2341:dump_module$7 ) begin end
    \$35  = element__w_data;
    if (w_shadow__0__w_en) begin
      \$35  = bus__w_data;
    end
    if (rst) begin
      \$35  = 8'h00;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2341:dump_module$7 ) begin end
    \$36  = w_shadow__1__data;
    if (w_shadow__1__w_en) begin
      \$36  = bus__w_data;
    end
    if (rst) begin
      \$36  = 8'h00;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2341:dump_module$7 ) begin end
    \$37  = w_shadow__2__data;
    if (w_shadow__2__w_en) begin
      \$37  = bus__w_data;
    end
    if (rst) begin
      \$37  = 8'h00;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2341:dump_module$7 ) begin end
    \$38  = 1'h0;
    casez (bus__addr)
      5'h0b:
          \$38  = bus__w_stb;
    endcase
    if (rst) begin
      \$38  = 1'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2341:dump_module$7 ) begin end
    \$39  = w_shadow__3__data;
    if (w_shadow__3__w_en) begin
      \$39  = bus__w_data;
    end
    if (rst) begin
      \$39  = 8'h00;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2341:dump_module$7 ) begin end
    element__r_stb = 1'h0;
    casez (bus__addr)
      5'h00:
          element__r_stb = bus__r_stb;
    endcase
  end
  assign \element__w_data$20  = element__w_data;
  assign w_shadow__0__data = element__w_data;
  assign \element__w_data$19 [31:24] = w_shadow__3__data;
  assign \element__w_data$19 [23:16] = w_shadow__2__data;
  assign \element__w_data$19 [15:8] = w_shadow__1__data;
  assign \element__w_data$19 [7:0] = element__w_data;
  assign \$2  = \$1 ;
  assign \$10  = \$9 ;
  assign \$12  = \$11 ;
  assign \$14  = \$13 ;
  assign \$15  = element__r_stb;
  assign r_shadow__1__w_en = \element__r_stb$9 ;
  assign r_shadow__2__w_en = \element__r_stb$9 ;
  assign r_shadow__3__w_en = \element__r_stb$9 ;
  assign \$19  = \$18 ;
endmodule

(* generator = "Amaranth" *)
module \spi_peripheral.spi (clk, rst, spi__sck_o, spi__csn_o, start_xfer, d_send, sck_idle, sck_edge, cs, width, divider, done, d_recv, spi__mosi_o, spi__miso_i);
  reg \$auto$verilog_backend.cc:2341:dump_module$8  = 0;
  wire \$1 ;
  reg [1:0] \$10 ;
  reg [31:0] \$11 ;
  reg [31:0] \$12 ;
  reg [5:0] \$13 ;
  reg [7:0] \$14 ;
  reg \$15 ;
  wire \$2 ;
  wire \$3 ;
  wire \$4 ;
  wire \$5 ;
  wire [6:0] \$6 ;
  wire \$7 ;
  wire [8:0] \$8 ;
  reg \$9 ;
  (* src = "/home/gatecat/gf130-design/my_design/ips/spi.py:43" *)
  reg [5:0] bit_count = 6'h00;
  (* src = "/home/gatecat/gf130-design/my_design/ips/spi.py:29" *)
  reg busy;
  input clk;
  wire clk;
  input cs;
  wire cs;
  output [31:0] d_recv;
  reg [31:0] d_recv = 32'd0;
  input [31:0] d_send;
  wire [31:0] d_send;
  (* src = "/home/gatecat/gf130-design/my_design/ips/spi.py:40" *)
  reg [7:0] div_ctr = 8'h00;
  input [7:0] divider;
  wire [7:0] divider;
  output done;
  reg done = 1'h0;
  (* src = "/home/gatecat/gf130-design/my_design/ips/spi.py:55" *)
  reg [1:0] fsm_state = 2'h0;
  (* src = "/home/gatecat/gf130-design/my_design/ips/spi.py:38" *)
  reg latch;
  input rst;
  wire rst;
  (* src = "/home/gatecat/gf130-design/my_design/ips/spi.py:34" *)
  reg sck = 1'h0;
  input sck_edge;
  wire sck_edge;
  input sck_idle;
  wire sck_idle;
  (* src = "/home/gatecat/gf130-design/my_design/ips/spi.py:37" *)
  reg setup;
  output spi__csn_o;
  wire spi__csn_o;
  input spi__miso_i;
  wire spi__miso_i;
  output spi__mosi_o;
  wire spi__mosi_o;
  output spi__sck_o;
  wire spi__sck_o;
  (* init = 32'd0 *)
  (* src = "/home/gatecat/gf130-design/my_design/ips/spi.py:42" *)
  wire [31:0] sr_i;
  (* src = "/home/gatecat/gf130-design/my_design/ips/spi.py:41" *)
  reg [31:0] sr_o = 32'd0;
  input start_xfer;
  wire start_xfer;
  input [4:0] width;
  wire [4:0] width;
  assign spi__sck_o = sck ^ (* src = "/home/gatecat/gf130-design/my_design/ips/spi.py:46" *) sck_idle;
  assign spi__csn_o = ~ (* src = "/home/gatecat/gf130-design/my_design/ips/spi.py:47" *) cs;
  assign \$1  = div_ctr == (* src = "/home/gatecat/gf130-design/my_design/ips/spi.py:69" *) divider;
  assign \$2  = ~ (* src = "/home/gatecat/gf130-design/my_design/ips/spi.py:78" *) sck_edge;
  assign \$3  = ~ (* src = "/home/gatecat/gf130-design/my_design/ips/spi.py:83" *) sck_edge;
  assign \$4  = div_ctr == (* src = "/home/gatecat/gf130-design/my_design/ips/spi.py:69" *) divider;
  assign \$5  = bit_count == (* src = "/home/gatecat/gf130-design/my_design/ips/spi.py:72" *) { 1'h0, width };
  assign \$6  = { 1'h0, bit_count } + (* src = "/home/gatecat/gf130-design/my_design/ips/spi.py:75" *) 7'h01;
  assign \$7  = ~ (* src = "/home/gatecat/gf130-design/my_design/ips/spi.py:87" *) sck;
  assign \$8  = { 1'h0, div_ctr } + (* src = "/home/gatecat/gf130-design/my_design/ips/spi.py:91" *) 9'h001;
  (* src = "/home/gatecat/gf130-design/my_design/ips/spi.py:30" *)
  always @(posedge clk)
    done <= \$9 ;
  (* src = "/home/gatecat/gf130-design/my_design/ips/spi.py:55" *)
  always @(posedge clk)
    fsm_state <= \$10 ;
  (* src = "/home/gatecat/gf130-design/my_design/ips/spi.py:42" *)
  always @(posedge clk)
    d_recv <= \$11 ;
  (* src = "/home/gatecat/gf130-design/my_design/ips/spi.py:41" *)
  always @(posedge clk)
    sr_o <= \$12 ;
  (* src = "/home/gatecat/gf130-design/my_design/ips/spi.py:43" *)
  always @(posedge clk)
    bit_count <= \$13 ;
  (* src = "/home/gatecat/gf130-design/my_design/ips/spi.py:40" *)
  always @(posedge clk)
    div_ctr <= \$14 ;
  (* src = "/home/gatecat/gf130-design/my_design/ips/spi.py:34" *)
  always @(posedge clk)
    sck <= \$15 ;
  always @* begin
    if (\$auto$verilog_backend.cc:2341:dump_module$8 ) begin end
    setup = 1'h0;
    casez (fsm_state)
      2'h0:
          /* empty */;
      2'h1:
          if (\$1 ) begin
            (* full_case = 32'd1 *)
            if (sck) begin
              setup = sck_edge;
            end else begin
              setup = \$3 ;
            end
          end
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2341:dump_module$8 ) begin end
    latch = 1'h0;
    casez (fsm_state)
      2'h0:
          /* empty */;
      2'h1:
          if (\$1 ) begin
            (* full_case = 32'd1 *)
            if (sck) begin
              latch = \$2 ;
            end else begin
              latch = sck_edge;
            end
          end
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2341:dump_module$8 ) begin end
    busy = 1'h0;
    casez (fsm_state)
      2'h0:
          /* empty */;
      2'h1:
          busy = 1'h1;
      2'h2:
          busy = 1'h1;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2341:dump_module$8 ) begin end
    \$9  = 1'h0;
    casez (fsm_state)
      2'h0:
          /* empty */;
      2'h1:
          /* empty */;
      2'h2:
          \$9  = 1'h1;
    endcase
    if (rst) begin
      \$9  = 1'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2341:dump_module$8 ) begin end
    \$10  = fsm_state;
    casez (fsm_state)
      2'h0:
          if (start_xfer) begin
            \$10  = 2'h1;
          end
      2'h1:
          if (\$4 ) begin
            if (sck) begin
              if (\$5 ) begin
                \$10  = 2'h2;
              end
            end
          end
      2'h2:
          \$10  = 2'h0;
    endcase
    if (rst) begin
      \$10  = 2'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2341:dump_module$8 ) begin end
    \$11  = d_recv;
    casez (fsm_state)
      2'h0:
          if (start_xfer) begin
            \$11  = 32'd0;
          end
    endcase
    if (latch) begin
      \$11  = { d_recv[30:0], spi__miso_i };
    end
    if (rst) begin
      \$11  = 32'd0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2341:dump_module$8 ) begin end
    \$12  = sr_o;
    casez (fsm_state)
      2'h0:
          if (start_xfer) begin
            \$12  = d_send;
          end
    endcase
    if (setup) begin
      \$12  = { sr_o[30:0], 1'h0 };
    end
    if (rst) begin
      \$12  = 32'd0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2341:dump_module$8 ) begin end
    \$13  = bit_count;
    casez (fsm_state)
      2'h0:
          \$13  = 6'h00;
      2'h1:
          if (\$4 ) begin
            if (sck) begin
              (* full_case = 32'd1 *)
              if (\$5 ) begin
              end else begin
                \$13  = \$6 [5:0];
              end
            end
          end
    endcase
    if (rst) begin
      \$13  = 6'h00;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2341:dump_module$8 ) begin end
    \$14  = div_ctr;
    casez (fsm_state)
      2'h0:
          \$14  = 8'h00;
      2'h1:
          (* full_case = 32'd1 *)
          if (\$4 ) begin
            \$14  = 8'h00;
          end else begin
            \$14  = \$8 [7:0];
          end
    endcase
    if (rst) begin
      \$14  = 8'h00;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2341:dump_module$8 ) begin end
    \$15  = sck;
    casez (fsm_state)
      2'h0:
          \$15  = 1'h0;
      2'h1:
          if (\$4 ) begin
            \$15  = \$7 ;
          end
    endcase
    if (rst) begin
      \$15  = 1'h0;
    end
  end
  assign sr_i = d_recv;
  assign spi__mosi_o = sr_o[31];
endmodule
